# Import necessary modules
from tkinter import *
import tkinter.filedialog
from tkinter import messagebox
from PIL import ImageTk, Image
from io import BytesIO
import os

# Define main class for Image Steganography
class IMG_Stegno:
    output_image_size = 0  # Variable to store image size after encoding

    # Main window setup
    def main(self, root):
        root.title('ImageSteganography by DataFlair')
        root.geometry('500x600')
        root.resizable(width=False, height=False)
        root.config(bg='#e3f4f1')
        frame = Frame(root)
        frame.grid()

        # Title label
        title = Label(frame, text='DataFlair Image Steganography')
        title.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        title.grid(pady=10)
        title.grid(row=1)

        # Encode button
        encode = Button(frame, text="Encode", command=lambda: self.encode_frame1(frame), padx=14, bg='#e3f4f1')
        encode.config(font=('Helvetica', 14), bg='#e8c1c7')
        encode.grid(row=2)

        # Decode button
        decode = Button(frame, text="Decode", command=lambda: self.decode_frame1(frame), padx=14, bg='#e3f4f1')
        decode.config(font=('Helvetica', 14), bg='#e8c1c7')
        decode.grid(pady=12)
        decode.grid(row=3)

        # Set layout configuration
        root.grid_rowconfigure(1, weight=1)
        root.grid_columnconfigure(0, weight=1)

    # Return to main menu
    def back(self, frame):
        frame.destroy()
        self.main(root)

    # Encode frame: Step 1 - Choose image
    def encode_frame1(self, F):
        F.destroy()
        F2 = Frame(root)

        # Label prompting image selection
        label1 = Label(F2, text='Select the Image in which \nyou want to hide text :')
        label1.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid()

        # Button to open file dialog
        button_bws = Button(F2, text='Select', command=lambda: self.encode_frame2(F2))
        button_bws.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid()

        # Cancel button
        button_back = Button(F2, text='Cancel', command=lambda: IMG_Stegno.back(self, F2))
        button_back.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        F2.grid()

    # Decode frame: Step 1 - Choose image
    def decode_frame1(self, F):
        F.destroy()
        d_f2 = Frame(root)

        # Label prompting image selection
        label1 = Label(d_f2, text='Select Image with Hidden text:')
        label1.config(font=('Times new roman', 25, 'bold'), bg='#e3f4f1')
        label1.grid()

        # Select button
        button_bws = Button(d_f2, text='Select', command=lambda: self.decode_frame2(d_f2))
        button_bws.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_bws.grid()

        # Cancel button
        button_back = Button(d_f2, text='Cancel', command=lambda: IMG_Stegno.back(self, d_f2))
        button_back.config(font=('Helvetica', 18), bg='#e8c1c7')
        button_back.grid(pady=15)
        button_back.grid()
        d_f2.grid()

    # Encode frame: Step 2 - Show image and enter message
    def encode_frame2(self, e_F2):
        e_pg = Frame(root)
        myfile = tkinter.filedialog.askopenfilename(filetypes=[('png', '*.png'), ('jpeg', '*.jpeg'), ('jpg', '*.jpg'), ('All Files', '*.*')])
        if not myfile:
            messagebox.showerror("Error", "You have selected nothing !")
        else:
            # Load and display selected image
            my_img = Image.open(myfile)
            new_image = my_img.resize((300, 200))
            img = ImageTk.PhotoImage(new_image)

            label3 = Label(e_pg, text='Selected Image')
            label3.config(font=('Helvetica', 14, 'bold'))
            label3.grid()

            board = Label(e_pg, image=img)
            board.image = img  # Keep reference
            self.output_image_size = os.stat(myfile)
            self.o_image_w, self.o_image_h = my_img.size
            board.grid()

            # Text input for hidden message
            label2 = Label(e_pg, text='Enter the message')
            label2.config(font=('Helvetica', 14, 'bold'))
            label2.grid(pady=15)

            text_a = Text(e_pg, width=50, height=10)
            text_a.grid()

            # Encode and Cancel buttons
            encode_button = Button(e_pg, text='Cancel', command=lambda: IMG_Stegno.back(self, e_pg))
            encode_button.config(font=('Helvetica', 14), bg='#e8c1c7')

            button_back = Button(e_pg, text='Encode', command=lambda: [self.enc_fun(text_a, my_img), IMG_Stegno.back(self, e_pg)])
            button_back.config(font=('Helvetica', 14), bg='#e8c1c7')
            button_back.grid(pady=15)

            encode_button.grid()
            e_pg.grid(row=1)
            e_F2.destroy()

    # Decode frame: Step 2 - Extract message
    def decode_frame2(self, d_F2):
        d_F3 = Frame(root)
        myfiles = tkinter.filedialog.askopenfilename(filetypes=[('png', '*.png'), ('jpeg', '*.jpeg'), ('jpg', '*.jpg'), ('All Files', '*.*')])
        if not myfiles:
            messagebox.showerror("Error", "You have selected nothing! ")
        else:
            # Load and show selected image
            my_img = Image.open(myfiles, 'r')
            my_image = my_img.resize((300, 200))
            img = ImageTk.PhotoImage(my_image)

            label4 = Label(d_F3, text='Selected Image :')
            label4.config(font=('Helvetica', 14, 'bold'))
            label4.grid()

            board = Label(d_F3, image=img)
            board.image = img
            board.grid()

            # Show hidden data
            hidden_data = self.decode(my_img)
            label2 = Label(d_F3, text='Hidden data is :')
            label2.config(font=('Helvetica', 14, 'bold'))
            label2.grid(pady=10)

            text_a = Text(d_F3, width=50, height=10)
            text_a.insert(INSERT, hidden_data)
            text_a.configure(state='disabled')
            text_a.grid()

            # Cancel button
            button_back = Button(d_F3, text='Cancel', command=lambda: self.frame_3(d_F3))
            button_back.config(font=('Helvetica', 14), bg='#e8c1c7')
            button_back.grid(pady=15)
            button_back.grid()
            d_F3.grid(row=1)
            d_F2.destroy()

    # Extract hidden data from image pixels
    def decode(self, image):
        image_data = iter(image.getdata())
        data = ''

        while True:
            # Process 3 pixels (9 RGB values)
            pixels = [value for value in next(image_data)[:3] +
                      next(image_data)[:3] +
                      next(image_data)[:3]]
            binary_str = ''
            for i in pixels[:8]:
                binary_str += '0' if i % 2 == 0 else '1'
            data += chr(int(binary_str, 2))

            # Check for stopping condition
            if pixels[-1] % 2 != 0:
                return data

    # Convert text to binary format
    def generate_Data(self, data):
        new_data = [format(ord(i), '08b') for i in data]
        return new_data

    # Modify image pixels based on binary data
    def modify_Pix(self, pix, data):
        dataList = self.generate_Data(data)
        imgData = iter(pix)

        for i in range(len(dataList)):
            # Take 3 pixels at a time
            pix = [value for value in next(imgData)[:3] +
                   next(imgData)[:3] +
                   next(imgData)[:3]]

            # Modify pixel LSBs based on data
            for j in range(8):
                if dataList[i][j] == '0' and pix[j] % 2 != 0:
                    pix[j] -= 1
                elif dataList[i][j] == '1' and pix[j] % 2 == 0:
                    pix[j] -= 1

            # End marker
            if i == len(dataList) - 1:
                if pix[-1] % 2 == 0:
                    pix[-1] -= 1
            else:
                if pix[-1] % 2 != 0:
                    pix[-1] -= 1

            # Yield modified pixels
            yield tuple(pix[0:3])
            yield tuple(pix[3:6])
            yield tuple(pix[6:9])

    # Place modified pixels into a new image
    def encode_enc(self, newImg, data):
        w = newImg.size[0]
        x, y = 0, 0

        for pixel in self.modify_Pix(newImg.getdata(), data):
            newImg.putpixel((x, y), pixel)
            x = 0 if x == w - 1 else x + 1
            y += 1 if x == 0 else 0

    # Main encoding function: get text and encode into image
    def enc_fun(self, text_a, myImg):
        data = text_a.get("1.0", "end-1c")
        if len(data) == 0:
            messagebox.showinfo("Alert", "Kindly enter text in TextBox")
        else:
            newImg = myImg.copy()
            self.encode_enc(newImg, data)

            # Save new image
            my_file = BytesIO()
            temp = os.path.splitext(os.path.basename(myImg.filename))[0]
            newImg.save(tkinter.filedialog.asksaveasfilename(initialfile=temp, filetypes=[('png', '*.png')], defaultextension=".png"))
            self.d_image_size = my_file.tell()
            self.d_image_w, self.d_image_h = newImg.size
            messagebox.showinfo("Success", "Encoding Successful\nFile is saved as Image_with_hiddentext.png in the same directory")

    # Return to main screen
    def frame_3(self, frame):
        frame.destroy()
        self.main(root)

# Initialize and run the application
root = Tk()
o = IMG_Stegno()
o.main(root)
root.mainloop()
